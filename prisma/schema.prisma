generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EmailLabel {
  INBOX
  SENT
  DRAFT
}

enum Sensitivity {
  NORMAL
  PRIVATE
  PERSONAL
  CONFIDENTIAL
}

enum MeetingMessageMethod {
  REQUEST
  REPLY
  CANCEL
  COUNTER
  OTHER
}

model User {
  id                 String               @id @default(cuid())
  imageUrl           String?
  email              String               @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userName           String?
  ChatbotInteraction ChatbotInteraction?
  StripeSubscription StripeSubscription[]
  Account            Account?

  @@index([email], map: "email_index")
}

model ChatbotInteraction {
  id     String  @id @default(cuid())
  day    String
  count  Int     @default(1)
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@unique([day, userId])
  @@index([day, userId])
}

model StripeSubscription {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  userId           String?  @unique
  subscriptionId   String?  @unique
  productId        String?
  priceId          String?
  customerId       String?
  currentPeriodEnd DateTime
  updatedAt        DateTime @updatedAt
  user             User?    @relation(fields: [userId], references: [id])
}

model Account {
  id           String         @id @default(cuid())
  grantEmail   String         @unique
  grantId      String         @unique
  userId       String?        @unique
  user         User?          @relation(fields: [userId], references: [id])
  Thread       Thread[]
  EmailAddress EmailAddress[]
}

model Thread {
  id              String   @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Account  @relation(fields: [accountId], references: [id])
  done            Boolean  @default(false)
  inboxStatus     Boolean  @default(true)
  draftStatus     Boolean  @default(false)
  sentStatus      Boolean  @default(false)
  Email           Email[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id])
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(NORMAL)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]
  emailLabel           EmailLabel            @default(INBOX)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")
  accountId     String
  account       Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  emailId         String
  Email           Email   @relation(fields: [emailId], references: [id])
}
